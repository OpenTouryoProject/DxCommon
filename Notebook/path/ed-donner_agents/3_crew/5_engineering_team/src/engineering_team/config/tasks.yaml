
design_task:

  description: >
    ここで説明した高レベルの要件を踏まえ、エンジニア向けに詳細な設計を準備します。要件は次のとおり：{requirements}
    - 設計は、全てを1つのPythonモジュールにまとめ、モジュール内の関数やクラス・メソッドの機能概要を記述することで達成する。
    - 設計は、モジュール内の関数やクラス・メソッドについて、機能レベルで詳細な説明を日本語、Markdown形式でのみ出力する。

  expected_output: >
    モジュール内の関数やクラス・メソッドを識別する、エンジニア向けの詳細な設計。

  agent: engineering_lead
  output_file: output/{module_name}_design.md

backend_code_task:

  description: >
    要件を満たすために、リード・エンジニアが設計した Python モジュール上にバックエンド・クラスを実装。要件は次のとおり：{requirements}

  expected_output: >
    設計を実装することで、Python モジュール（*.pyファイル）上に、要件を満たすバックエンド・クラスを実装。
    - 出力は、Python モジュール（*.pyファイル）に直接保存して実行できる有効な Python コードである必要がある。
    - 出力は、Markdown 形式、コードブロックの区切り文字、バッククォートを一切使用しない、生の Python コードに限定する。

  context:
    - design_task

  agent: backend_engineer
  output_file: output/{module_name}

frontend_code_task:

  description: >
    モジュール app.py に、{module_name} バックエンド・モジュール中のクラスのデモンストレーションを行うGradio UI を実装。
    ユーザーは 1 人だけと想定し、UI はプロトタイプまたはデモ程度にシンプルにする。要件は次のとおり: {requirements}

  expected_output: >
    モジュール app.py 内で、指定されたバックエンド・モジュール中のクラスのデモンストレーションを行うGradio UI。
    同ディレクトリ上の、バックエンド・モジュール {module_name} からバックエンド・クラスをインポートし実行できるように準備。
    - 出力は、Python モジュール（*.pyファイル）に直接保存して実行できる有効な Python コードである必要がある。
    - 出力は、Markdown 形式、コードブロックの区切り文字、バッククォートを一切使用しない、生の Python コードに限定する。

  context:
    - backend_code_task

  agent: frontend_engineer
  output_file: output/app.py

test_code_task:

  description: >
    - バックエンド・モジュール {module_name} 上のバックエンド・クラスの単体テストを記述する。
    - バックエンド・モジュールと同じディレクトリに テスト・モジュール test_{module_name} を作成する。

  expected_output: >
    指定されたバックエンド・モジュールをテストするテスト・モジュール test_{module_name}。
    - 出力は、Python モジュール（*.pyファイル）に直接保存して実行できる有効な Python コードである必要がある。
    - 出力は、Markdown 形式、コードブロックの区切り文字、バッククォートを一切使用しない、生の Python コードに限定する。

  context:
    - backend_code_task

  agent: test_engineer
  output_file: output/test_{module_name}